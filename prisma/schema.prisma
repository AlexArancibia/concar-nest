generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL") // uses a direct connection
}

// Enums for various statuses and types used throughout the schema
enum CurrencyPosition {
  BEFORE // Symbol appears before the amount (e.g., $100)
  AFTER  // Symbol appears after the amount (e.g., 100â‚¬)
}

enum OrderFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  VOIDED
}

enum OrderFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

enum ProductStatus {
  DRAFT    // Product is not yet published
  ACTIVE   // Product is published and available
  ARCHIVED // Product is no longer available but kept for record
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}

enum FulfillmentStatus {
  PENDING
  OPEN
  SUCCESS
  CANCELLED
  ERROR
  FAILURE
}

enum PaymentProviderType {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
  OTHER
}

enum ShippingMethodType {
  STANDARD
  EXPRESS
  OVERNIGHT
  FREE
  PICKUP
  CUSTOM
}

enum ContentType {
  PAGE
  BLOG_POST
}

enum UserRole {
  ADMIN
  MANAGER
  EDITOR
  CUSTOMER_SERVICE
}

// Model for storing shop-wide settings
model ShopSettings {
  id                String           @id @default(dbgenerated("'shop_' || substr(gen_random_uuid()::text, 1, 13)"))
  name              String           // Name of the shop
  domain            String           @unique // Domain of the shop's website
  email             String?          // Contact email for the shop
  shopOwner         String?          // Name of the shop owner
  address1          String?          // First line of the shop's address
  address2          String?          // Second line of the shop's address
  city              String?          // City where the shop is located
  province          String?          // Province or state where the shop is located
  provinceCode      String?          // Code of the province or state
  country           String?          // Country where the shop is located
  countryCode       String?          // Code of the country
  zip               String?          // Zip or postal code of the shop
  phone             String?          // Contact phone number for the shop
  defaultCurrency   Currency         @relation("DefaultCurrency", fields: [defaultCurrencyId], references: [id])
  defaultCurrencyId String           @unique // Default currency used by the shop
  acceptedCurrencies Currency[]      @relation("AcceptedCurrencies") // Currencies accepted by the shop
  timezone          String?          // Timezone of the shop
  weightUnit        String?          // Unit used for weight measurements
  taxesIncluded     Boolean          @default(false) // Whether prices include taxes
  taxShipping       Boolean          @default(false) // Whether shipping is taxed
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  Currency Currency[] @relation("BaseCurrency") // Currencies for which this shop is the base
}

// Model for currencies supported by the shop
model Currency {
  id                 String         @id @default(dbgenerated("'curr_' || substr(gen_random_uuid()::text, 1, 13)"))
  code               String         @unique // ISO code of the currency (e.g., USD, EUR)
  name               String         // Full name of the currency
  symbol             String         // Symbol of the currency
  decimalPlaces      Int            @default(2) // Number of decimal places for the currency
  symbolPosition     CurrencyPosition @default(BEFORE) // Position of the currency symbol
  isActive           Boolean        @default(true) // Whether the currency is active
  defaultForShop     ShopSettings?  @relation("DefaultCurrency")
  acceptedByShops    ShopSettings[] @relation("AcceptedCurrencies")
  baseForShops       ShopSettings[] @relation("BaseCurrency")
  fromExchangeRates  ExchangeRate[] @relation("FromCurrency")
  toExchangeRates    ExchangeRate[] @relation("ToCurrency")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  ProductPrice ProductPrice[]
  VariantPrice VariantPrice[]
}

// Model for storing exchange rates between currencies
model ExchangeRate {
  id               String   @id @default(dbgenerated("'exr_' || substr(gen_random_uuid()::text, 1, 13)"))
  fromCurrency     Currency @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  fromCurrencyId   String   // Currency being converted from
  toCurrency       Currency @relation("ToCurrency", fields: [toCurrencyId], references: [id])
  toCurrencyId     String   // Currency being converted to
  rate             Decimal  // Exchange rate
  effectiveDate    DateTime // Date from which this rate is effective
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([fromCurrencyId, toCurrencyId, effectiveDate])
}

// Model for product categories
model Category {
  id           String     @id @default(dbgenerated("'cat_' || substr(gen_random_uuid()::text, 1, 13)"))
  name         String     // Name of the category
  slug         String     @unique // URL-friendly version of the name
  description  String?    // Description of the category
  parentId     String?    // ID of the parent category (for nested categories)
  parent       Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToParent")
  products     Product[]  // Products belonging to this category
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Model for products
model Product {
  id                String          @id @default(dbgenerated("'prod_' || substr(gen_random_uuid()::text, 1, 13)"))
  title             String          // Title of the product
  description       String?         // Description of the product
  slug              String          @unique // URL-friendly version of the title
  vendor            String?         // Vendor or brand of the product
  prices            ProductPrice[]  // Prices of the product in different currencies
  status            ProductStatus   @default(DRAFT) // Current status of the product
  categories        Category[]      // Categories the product belongs to
  variants          ProductVariant[] // Variants of the product
  imageUrls         String[]        // URLs of the product images
  collections       Collection[]    // Collections the product belongs to
  orderItems        OrderItem[]     // Order items referencing this product
  sku               String?         @unique // Stock Keeping Unit
  inventoryQuantity Int             @default(0) // Available quantity in inventory
  weightValue       Decimal?        // Weight of the product
  weightUnit        String?         // Unit of the weight (e.g., kg, lb)
  isArchived        Boolean         @default(false) // Whether the product is archived
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// Model for product prices in different currencies
model ProductPrice {
  id         String   @id @default(dbgenerated("'pp_' || substr(gen_random_uuid()::text, 1, 13)"))
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   // ID of the product this price is for
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String   // ID of the currency for this price
  price      Decimal  // Price value
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, currencyId])
}

// Model for product variants
model ProductVariant {
  id                String        @id @default(dbgenerated("'var_' || substr(gen_random_uuid()::text, 1, 13)"))
  product           Product       @relation(fields: [productId], references: [id])
  productId         String        // ID of the parent product
  title             String        // Title of the variant
  sku               String?       @unique // Stock Keeping Unit for the variant
  attributes        Json?         // JSON object containing variant attributes
  imageUrl          String?       // URL of the variant's image
  prices            VariantPrice[] // Prices of the variant in different currencies
  compareAtPrice    Decimal?      // Original price for comparison (e.g., for sales)
  inventoryQuantity Int           @default(0) // Available quantity of this variant
  weightValue       Decimal?      // Weight of the variant
  weightUnit        String?       // Unit of the weight
  position          Int           @default(1) // Position of the variant in the list
  orderItems        OrderItem[]   // Order items referencing this variant
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// Model for variant prices in different currencies
model VariantPrice {
  id         String         @id @default(dbgenerated("'vp_' || substr(gen_random_uuid()::text, 1, 13)"))
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  String         // ID of the variant this price is for
  currency   Currency       @relation(fields: [currencyId], references: [id])
  currencyId String         // ID of the currency for this price
  price      Decimal        // Price value
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([variantId, currencyId])
}

// Model for customers
model Customer {
  id               String            @id @default(dbgenerated("'cu_' || substr(gen_random_uuid()::text, 1, 13)"))
  email            String            @unique // Email address of the customer
  firstName        String?           // First name of the customer
  lastName         String?           // Last name of the customer
  phone            String?           // Phone number of the customer
  password         String            // Hashed password of the customer
  acceptsMarketing Boolean           @default(false) // Whether the customer accepts marketing emails
  orders           Order[]           // Orders placed by this customer
  addresses        CustomerAddress[] // Addresses associated with this customer
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// Model for customer addresses
model CustomerAddress {
  id         String   @id @default(dbgenerated("'addr_' || substr(gen_random_uuid()::text, 1, 13)"))
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   // ID of the customer this address belongs to
  address1   String   // First line of the address
  address2   String?  // Second line of the address
  city       String   // City
  province   String?  // Province or state
  zip        String   // Zip or postal code
  country    String   // Country
  phone      String?  // Phone number associated with this address
  isDefault  Boolean  @default(false) // Whether this is the default address for the customer
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Model for orders
model Order {
  id                String                 @id @default(dbgenerated("'ord_' || substr(gen_random_uuid()::text, 1, 13)"))
  customer          Customer?              @relation(fields: [customerId], references: [id])
  customerId        String?                // ID of the customer who placed the order
  orderNumber       Int                    // Unique number for the order
  email             String?                // Email address for the order
  phone             String?                // Phone number for the order
  financialStatus   OrderFinancialStatus?  // Current financial status of the order
  fulfillmentStatus OrderFulfillmentStatus? // Current fulfillment status of the order
  currency          String                 // Currency used for the order
  totalPrice        Decimal                // Total price of the order
  subtotalPrice     Decimal                // Subtotal price (before tax and discounts)
  totalTax          Decimal                // Total tax amount
  totalDiscounts    Decimal                // Total discounts applied
  lineItems         OrderItem[]            // Items in the order
  shippingAddressId String?                // ID of the shipping address
  shippingAddress   Address?               @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?                // ID of the billing address
  billingAddress    Address?               @relation("BillingAddress", fields: [billingAddressId], references: [id])
  fulfillments      Fulfillment[]          // Fulfillments associated with this order
  refunds           Refund[]               // Refunds associated with this order
  discountCodes     OrderDiscountCode[]    // Discount codes applied to this order
  taxLines          OrderTaxLine[]         // Tax lines for this order
  paymentProvider   PaymentProvider?       @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String?                // ID of the payment provider used
  shippingMethod    ShippingMethod?        @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  String?                // ID of the shipping method used
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

// Model for order items
model OrderItem {
  id                 String    @id @default(dbgenerated("'oi_' || substr(gen_random_uuid()::text, 1, 13)"))
  order              Order     @relation(fields: [orderId], references: [id])
  orderId            String    // ID of the order this item belongs to
  product            Product   @relation(fields: [productId], references: [id])
  productId          String    // ID of the product
  variant            ProductVariant? @relation(fields: [variantId], references: [id])
  variantId          String?   // ID of the product variant (if applicable)
  title              String    // Title of the product
  quantity           Int       // Quantity ordered
  price              Decimal   // Price per unit at the time of order
  totalDiscount      Decimal   @default(0) // Total discount applied to this item
  fulfillments       FulfillmentLineItem[] // Fulfillment line items for this order item
  refundLineItems    RefundLineItem[] // Refund line items for this order item
  taxLines           OrderItemTaxLine[] // Tax lines for this order item
  discountAllocations OrderItemDiscountAllocation[] // Discount allocations for this order item
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// Model for addresses (used for shipping and billing)
model Address {
  id                String   @id @default(dbgenerated("'addr_' || substr(gen_random_uuid()::text, 1, 13)"))
  firstName         String?  // First name associated with this address
  lastName          String?  // Last name associated with this address
  company           String?  // Company name (if applicable)
  address1          String   // First line of the address
  address2          String?  // Second line of the address
  city              String   // City
  province          String?  // Province or state
  zip               String   // Zip or postal code
  country           String   // Country
  phone             String?  // Phone number associated with this address
  ordersAsShipping  Order[]  @relation("ShippingAddress") // Orders using this as shipping address
  ordersAsBilling   Order[]  @relation("BillingAddress") // Orders using this as billing address
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Model for order fulfillments
model Fulfillment {
  id              String                @id @default(dbgenerated("'ful_' || substr(gen_random_uuid()::text, 1, 13)"))
  order           Order                 @relation(fields: [orderId], references: [id])
  orderId         String                // ID of the order this fulfillment belongs to
  status          FulfillmentStatus     // Current status of the fulfillment
  trackingCompany String?               // Shipping company handling the fulfillment
  trackingNumber  String?               // Tracking number for the shipment
  trackingUrl     String?               // URL to track the shipment
  lineItems       FulfillmentLineItem[] // Line items included in this fulfillment
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

// Model for fulfillment line items
model FulfillmentLineItem {
  id              String     @id @default(dbgenerated("'fli_' || substr(gen_random_uuid()::text, 1, 13)"))
  fulfillment     Fulfillment @relation(fields: [fulfillmentId], references: [id])
  fulfillmentId   String     // ID of the fulfillment this line item belongs to
  orderItem       OrderItem  @relation(fields: [orderItemId], references: [id])
  orderItemId     String     // ID of the order item being fulfilled
  quantity        Int        // Quantity being fulfilled
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

// Model for refunds
model Refund {
  id            String          @id @default(dbgenerated("'ref_' || substr(gen_random_uuid()::text, 1, 13)"))
  order         Order           @relation(fields: [orderId], references: [id])
  orderId       String          // ID of the order this refund belongs to
  amount        Decimal         // Total amount refunded
  note          String?         // Note about the refund
  restock       Boolean         @default(false) // Whether items were restocked
  processedAt   DateTime?       // When the refund was processed
  lineItems     RefundLineItem[] // Line items included in this refund
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Model for refund line items
model RefundLineItem {
  id            String    @id @default(dbgenerated("'rli_' || substr(gen_random_uuid()::text, 1, 13)"))
  refund        Refund    @relation(fields: [refundId], references: [id])
  refundId      String    // ID of the refund this line item belongs to
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId   String    // ID of the order item being refunded
  quantity      Int       // Quantity being refunded
  amount        Decimal   // Amount refunded for this line item
  restocked     Boolean   @default(false) // Whether this item was restocked
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Model for store locations
model Location {
  id        String   @id @default(dbgenerated("'loc_' || substr(gen_random_uuid()::text, 1, 13)"))
  name      String   // Name of the location
  active    Boolean  @default(true) // Whether the location is active
  address1  String?  // First line of the address
  address2  String?  // Second line of the address
  city      String?  // City
  zip       String?  // Zip or postal code
  province  String?  // Province or state
  country   String?  // Country
  phone     String?  // Phone number for the location
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model for product collections
model Collection {
  id          String    @id @default(dbgenerated("'col_' || substr(gen_random_uuid()::text, 1, 13)"))
  title       String    // Title of the collection
  description String?   // Description of the collection
  slug        String    @unique // URL-friendly version of the title
  products    Product[] // Products in this collection
  imageUrl    String?   // URL of the collection's image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model for order discount codes
model OrderDiscountCode {
  id              String       @id @default(dbgenerated("'odc_' || substr(gen_random_uuid()::text, 1, 13)"))
  order           Order        @relation(fields: [orderId], references: [id])
  orderId         String       // ID of the order this discount code was applied to
  code            String       // The discount code used
  amount          Decimal      // Amount of the discount
  type            DiscountType // Type of discount applied
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// Model for order tax lines
model OrderTaxLine {
  id                      String   @id @default(dbgenerated("'otl_' || substr(gen_random_uuid()::text, 1, 13)"))
  order                   Order    @relation(fields: [orderId], references: [id])
  orderId                 String   // ID of the order this tax line belongs to
  title                   String   // Title of the tax (e.g., "VAT", "Sales Tax")
  rate                    Decimal  // Tax rate applied
  price                   Decimal  // Amount of tax
  channelLiable           Boolean  // Whether the sales channel is liable for remitting this tax
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// Model for order item tax lines
model OrderItemTaxLine {
  id            String    @id @default(dbgenerated("'oitl_' || substr(gen_random_uuid()::text, 1, 13)"))
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId   String    // ID of the order item this tax line belongs to
  title         String    // Title of the tax
  rate          Decimal   // Tax rate applied
  price         Decimal   // Amount of tax
  channelLiable Boolean   // Whether the sales channel is liable for remitting this tax
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Model for order item discount allocations
model OrderItemDiscountAllocation {
  id            String    @id @default(dbgenerated("'oida_' || substr(gen_random_uuid()::text, 1, 13)"))
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId   String    // ID of the order item this discount allocation belongs to
  amount        Decimal   // Amount of discount allocated to this item
  discountApplicationIndex Int // Index indicating the order of discount application
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Model for payment providers
model PaymentProvider {
  id          String              @id @default(dbgenerated("'pp_' || substr(gen_random_uuid()::text, 1, 13)"))
  name        String              // Name of the payment provider
  type        PaymentProviderType // Type of payment provider
  description String?             // Description of the payment provider
  isActive    Boolean             @default(true) // Whether the provider is active
  credentials Json?               // Credentials for connecting to the provider (encrypted)
  orders      Order[]             // Orders processed by this provider
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Model for shipping methods
model ShippingMethod {
  id          String             @id @default(dbgenerated("'sm_' || substr(gen_random_uuid()::text, 1, 13)"))
  name        String             // Name of the shipping method
  type        ShippingMethodType // Type of shipping method
  description String?            // Description of the shipping method
  price       Decimal            // Price of the shipping method
  isActive    Boolean            @default(true) // Whether the method is active
  orders      Order[]            // Orders using this shipping method
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

// Model for content (pages and blog posts)
model Content {
  id        String      @id @default(dbgenerated("'cont_' || substr(gen_random_uuid()::text, 1, 13)"))
  title     String      // Title of the content
  slug      String      @unique // URL-friendly version of the title
  body      String      // Main content of the page or blog post
  type      ContentType // Type of content (page or blog post)
  author    String?     // Author of the content
  published Boolean     @default(false) // Whether the content is published
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Model for users (admin, managers, editors, etc.)
model User {
  id           String      @id @default(dbgenerated("'user_' || substr(gen_random_uuid()::text, 1, 13)"))
  email        String      @unique // Email address of the user
  password     String      // Hashed password
  firstName    String      // First name of the user
  lastName     String      // Last name of the user
  role         UserRole    // Role of the user in the system
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

