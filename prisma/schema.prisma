// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  ADMIN
  MANAGER
  ACCOUNTANT
  EDITOR
  VIEWER
}

enum AuthProvider {
  GITHUB
  GOOGLE
  MICROSOFT
  EMAIL
}

enum SupplierType {
  INDIVIDUAL
  COMPANY
  GOVERNMENT
  FOREIGN
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_APPROVAL
}

enum BankAccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
}

enum DocumentType {
  INVOICE
  CREDIT_NOTE
  DEBIT_NOTE
  RECEIPT
  PURCHASE_ORDER
  CONTRACT
}

enum DocumentStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum TransactionType {
  PAYROLL_SALARY        // Sueldos
  PAYROLL_CTS           // CTS
  PAYROLL_BONUS         // Gratificaciones o bonos
  PAYROLL_AFP           // Aportes a AFP

  TAX_PAYMENT           // SUNAT, IGV, Renta, etc.
  TAX_ITF               // Impuesto a las transacciones financieras
  TAX_DETRACTION        // Pagos de detracción

  EXPENSE_UTILITIES     // Servicios como luz, agua, internet
  EXPENSE_INSURANCE     // Seguros (ej. MAPFRE)
  EXPENSE_COMMISSIONS   // Comisiones, mantenimiento, portes
  EXPENSE_PURCHASE      // Pago a proveedores
  EXPENSE_OTHER         // Egresos varios

  TRANSFER_INBANK       // Transferencia dentro del mismo banco
  TRANSFER_EXTERNAL     // Transferencia interbancaria (CCE, etc.)

  WITHDRAWAL_CASH       // Retiro de efectivo
  ADJUSTMENT            // Ajustes o regularizaciones
  REFUND                 // Reembolso o devolución
}


enum TransactionStatus {
  PENDING
  PROCESSED
  RECONCILED
  CANCELLED
}

enum ConciliationType {
  DOCUMENTS
  DETRACTIONS
}

enum ConciliationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ConciliationItemType {
  DOCUMENT
  TRANSACTION
  ADJUSTMENT
}

enum ConciliationItemStatus {
  PENDING
  MATCHED
  PARTIAL
  UNMATCHED
}

enum ExpenseType {
  OPERATIONAL
  ADMINISTRATIVE
  FINANCIAL
  TAX
  OTHER
}

enum ExpenseStatus {
  IMPORTED
  PROCESSED
  RECONCILED
  REJECTED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}

// ============================================================================
// CORE MODELS
// ============================================================================

model User {
  id                   String    @id @default(dbgenerated("'us_' || substr(gen_random_uuid()::text, 1, 13)"))
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  firstName            String?
  lastName             String?
  role                 UserRole  @default(VIEWER)
  authProvider         AuthProvider @default(EMAIL)
  authProviderId       String?
  accessToken          String?
  refreshToken         String?
  tokenExpiresAt       DateTime?
  phone                String?
  bio                  String?
  preferences          Json?
  lastLogin            DateTime?
  failedLoginAttempts  Int       @default(0)
  lockedUntil          DateTime?
  isActive             Boolean   @default(true)
  companyId            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  company              Company?   @relation(fields: [companyId], references: [id])
  sessions             Session[]
  auditLogs            AuditLog[]
  documentsCreated     Document[] @relation("DocumentCreatedBy")
  documentsUpdated     Document[] @relation("DocumentUpdatedBy")
  conciliationsCreated Conciliation[] @relation("ConciliationCreatedBy")
  conciliationsApproved Conciliation[] @relation("ConciliationApprovedBy")
  expensesImported     Expense[] @relation("ExpenseImportedBy")
  expensesProcessed    Expense[] @relation("ExpenseProcessedBy")
  expensesReconciled   Expense[] @relation("ExpenseReconciledBy")
  sunatRheUploads      SunatRhe[]
  sunatInvoicesManaged SunatInvoice[]

  @@map("users")
}

model Session {
  id           String  @id @default(dbgenerated("'sess_' || substr(gen_random_uuid()::text, 1, 13)"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Company {
  id        String   @id @default(dbgenerated("'cmp_' || substr(gen_random_uuid()::text, 1, 13)"))
  name      String
  tradeName String?
  ruc       String   @unique
  address   String?
  phone     String?
  email     String?
  website   String?
  logo      String?
  settings  Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users                    User[]
  suppliers                Supplier[]
  documents                Document[]
  bankAccounts             BankAccount[]
  transactions             Transaction[]
  expenses                 Expense[]
  accountingAccounts       AccountingAccount[]
  costCenters              CostCenter[]
  conciliations            Conciliation[]
  sunatRhe                 SunatRhe[]
  sunatInvoices            SunatInvoice[]
  expenseCategories        ExpenseCategory[]

  @@map("companies")
  AuditLog AuditLog[]
}

// ============================================================================
// ACCOUNTING MODELS
// ============================================================================

model AccountingAccount {
  id              String  @id @default(dbgenerated("'aa_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId       String
  accountCode     String
  accountName     String
  accountType     String
  parentAccountId String?
  level           Int     @default(1)
  isActive        Boolean @default(true)
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company                    Company @relation(fields: [companyId], references: [id])
  parentAccount              AccountingAccount? @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  childAccounts              AccountingAccount[] @relation("AccountHierarchy")
  documentAccountLinks       DocumentAccountLink[]
  documentLineAccountLinks   DocumentLineAccountLink[]
  conciliationExpenses       ConciliationExpense[]

  @@unique([companyId, accountCode])
  @@map("accounting_accounts")
}

model CostCenter {
  id                 String  @id @default(dbgenerated("'cc_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId          String
  code               String
  name               String
  description        String?
  parentCostCenterId String?
  level              Int     @default(1)
  isActive           Boolean @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  company                       Company @relation(fields: [companyId], references: [id])
  parentCostCenter              CostCenter? @relation("CostCenterHierarchy", fields: [parentCostCenterId], references: [id])
  childCostCenters              CostCenter[] @relation("CostCenterHierarchy")
  documentCostCenterLinks       DocumentCostCenterLink[]
  documentLineCostCenterLinks   DocumentLineCostCenterLink[]

  @@unique([companyId, code])
  @@map("cost_centers")
}

// ============================================================================
// NORMALIZED MODELS
// ============================================================================

model ExpenseCategory {
  id                String   @id @default(dbgenerated("'ec_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId         String
  discipline        String?
  location          String?
  generalCategory   String?
  type              String?
  account           String?
  subAccount        String?
  accountingAccount String?
  description       String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company  Company   @relation(fields: [companyId], references: [id])
  expenses Expense[]

  @@map("expense_categories")
}

model TaxScheme {
  id             String   @id @default(dbgenerated("'ts_' || substr(gen_random_uuid()::text, 1, 13)"))
  taxSchemeId    String   @unique
  taxSchemeName  String
  taxCategoryId  String?
  taxTypeCode    String?
  taxPercentage  Decimal? @db.Decimal(5, 4)
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  documentLines DocumentLine[]

  @@map("tax_schemes")
}

// ============================================================================
// SUPPLIER MODELS
// ============================================================================

model Supplier {
  id               String         @id @default(dbgenerated("'spp_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId        String
  businessName     String
  tradeName        String?
  documentType     String
  documentNumber   String
  supplierType     SupplierType
  email            String?
  phone            String?
  address          String?
  district         String?
  province         String?
  department       String?
  country          String?        @default("PE")
  status           SupplierStatus @default(ACTIVE)
  creditLimit      Decimal?       @db.Decimal(15, 2)
  paymentTerms     Int?
  taxCategory      String?
  isRetentionAgent Boolean        @default(false)
  retentionRate    Decimal?       @db.Decimal(5, 4)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  company            Company               @relation(fields: [companyId], references: [id])
  documents          Document[]
  expenses           Expense[]
  supplierBankAccounts SupplierBankAccount[]

  @@unique([companyId, documentNumber])
  @@map("suppliers")
}

model SupplierBankAccount {
  id            String          @id @default(dbgenerated("'sba_' || substr(gen_random_uuid()::text, 1, 13)"))
  supplierId    String
  bankId        String
  accountNumber String
  accountType   BankAccountType
  currency      String
  isDefault     Boolean         @default(false)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  bank        Bank     @relation(fields: [bankId], references: [id])
  currencyRef Currency @relation(fields: [currency], references: [code])

  @@map("supplier_bank_accounts")
}

// ============================================================================
// DOCUMENT MODELS
// ============================================================================

model Document {
  id                    String         @id @default(dbgenerated("'doc_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId             String
  documentType          DocumentType
  series                String
  number                String
  fullNumber            String
  supplierId            String
  issueDate             DateTime
  issueTime             String?
  dueDate               DateTime?
  receptionDate         DateTime?
  currency              String
  exchangeRate          Decimal        @default(1) @db.Decimal(10, 6)
  subtotal              Decimal        @db.Decimal(15, 2)
  igv                   Decimal        @db.Decimal(15, 2)
  otherTaxes            Decimal        @default(0) @db.Decimal(15, 2)
  total                 Decimal        @db.Decimal(15, 2)
  hasRetention          Boolean        @default(false)
  retentionAmount       Decimal        @default(0) @db.Decimal(15, 2)
  retentionPercentage   Decimal        @default(0) @db.Decimal(5, 4)
  netPayableAmount      Decimal        @db.Decimal(15, 2)
  conciliatedAmount     Decimal        @default(0) @db.Decimal(15, 2)
  pendingAmount         Decimal        @db.Decimal(15, 2)
  paymentMethod         String?
  description           String?
  observations          String?
  tags                  String?
  status                DocumentStatus @default(PENDING)
  orderReference        String?
  contractNumber        String?
  additionalNotes       String?
  documentNotes         String?
  operationNotes        String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  createdById           String
  updatedById           String

  // Relations
  company                   Company                     @relation(fields: [companyId], references: [id])
  supplier                  Supplier                    @relation(fields: [supplierId], references: [id])
  currencyRef               Currency                    @relation(fields: [currency], references: [code])
  createdBy                 User                        @relation("DocumentCreatedBy", fields: [createdById], references: [id])
  updatedBy                 User                        @relation("DocumentUpdatedBy", fields: [updatedById], references: [id])
  xmlData                   DocumentXmlData?
  digitalSignature          DocumentDigitalSignature?
  detraction                DocumentDetraction?
  lines                     DocumentLine[]
  paymentTerms              DocumentPaymentTerm[]
  accountLinks              DocumentAccountLink[]
  costCenterLinks           DocumentCostCenterLink[]
  conciliationItems         ConciliationItem[]
  supportedExpenses         Expense[]

  @@unique([companyId, fullNumber])
  @@map("documents")
}

model DocumentXmlData {
  id                      String   @id @default(dbgenerated("'xml_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId              String   @unique
  xmlFileName             String?
  xmlContent              String?
  xmlHash                 String?
  xmlUblVersion           String?
  xmlCustomizationId      String?
  documentTypeDescription String?
  sunatResponseCode       String?
  cdrStatus               String?
  sunatProcessDate        DateTime?
  pdfFile                 String?
  qrCode                  String?
  xmlAdditionalData       String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_xml_data")
}

model DocumentDigitalSignature {
  id                      String   @id @default(dbgenerated("'dds_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId              String   @unique
  digitalSignatureId      String?
  digitalSignatureUri     String?
  certificateIssuer       String?
  certificateSubject      String?
  signatureDate           DateTime?
  signatureValue          String?
  certificateData         String?
  canonicalizationMethod  String?
  signatureMethod         String?
  digestMethod            String?
  digestValue             String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_digital_signatures")
}

model DocumentPaymentTerm {
  id          String   @id @default(dbgenerated("'dpt_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId  String
  termNumber  Int
  amount      Decimal  @db.Decimal(15, 2)
  dueDate     DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_payment_terms")
}

model DocumentDetraction {
  id                         String   @id @default(dbgenerated("'ddtr_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId                 String   @unique
  hasDetraction              Boolean  @default(false)
  amount                     Decimal  @default(0) @db.Decimal(15, 2)
  code                       String?
  percentage                 Decimal  @default(0) @db.Decimal(5, 4)
  serviceCode                String?
  account                    String?
  paymentDate                DateTime?
  paymentReference           String?
  isConciliated              Boolean  @default(false)
  conciliatedAmount          Decimal  @default(0) @db.Decimal(15, 2)
  pendingAmount              Decimal  @default(0) @db.Decimal(15, 2)
  conciliationId             String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relations
  document                   Document                    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  conciliation               Conciliation?               @relation(fields: [conciliationId], references: [id])

  @@map("document_detractions")
}

model DocumentLine {
  id                        String   @id @default(dbgenerated("'dline_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId                String
  lineNumber                Int
  productCode               String?
  description               String
  quantity                  Decimal  @db.Decimal(15, 6)
  unitCode                  String?
  unitPrice                 Decimal  @db.Decimal(15, 6)
  unitPriceWithTax          Decimal  @db.Decimal(15, 6)
  lineTotal                 Decimal  @db.Decimal(15, 2)
  igvAmount                 Decimal  @default(0) @db.Decimal(15, 2)
  taxExemptionCode          String?
  taxExemptionReason        String?
  taxSchemeId               String?
  priceTypeCode             String?
  referencePrice            Decimal? @db.Decimal(15, 6)
  itemClassificationCode    String?
  freeOfChargeIndicator     Boolean  @default(false)
  allowanceAmount           Decimal  @default(0) @db.Decimal(15, 2)
  allowanceIndicator        Boolean  @default(false)
  chargeAmount              Decimal  @default(0) @db.Decimal(15, 2)
  chargeIndicator           Boolean  @default(false)
  orderLineReference        String?
  lineNotes                 String?
  taxableAmount             Decimal  @default(0) @db.Decimal(15, 2)
  exemptAmount              Decimal  @default(0) @db.Decimal(15, 2)
  inaffectedAmount          Decimal  @default(0) @db.Decimal(15, 2)
  xmlLineData               String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  document                  Document                      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  taxScheme                 TaxScheme?                    @relation(fields: [taxSchemeId], references: [id])
  accountLinks              DocumentLineAccountLink[]
  costCenterLinks           DocumentLineCostCenterLink[]

  @@map("document_lines")
}

// ============================================================================
// LINKING MODELS
// ============================================================================

model DocumentAccountLink {
  id         String   @id @default(dbgenerated("'dal_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId String
  accountId  String
  percentage Decimal  @db.Decimal(5, 4)
  amount     Decimal  @db.Decimal(15, 2)
  createdAt  DateTime @default(now())

  // Relations
  document Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  account  AccountingAccount @relation(fields: [accountId], references: [id])

  @@map("document_account_links")
}

model DocumentLineAccountLink {
  id             String   @id @default(dbgenerated("'dlal_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentLineId String
  accountId      String
  percentage     Decimal  @db.Decimal(5, 4)
  amount         Decimal  @db.Decimal(15, 2)
  createdAt      DateTime @default(now())

  // Relations
  documentLine DocumentLine       @relation(fields: [documentLineId], references: [id], onDelete: Cascade)
  account      AccountingAccount  @relation(fields: [accountId], references: [id])

  @@map("document_line_account_links")
}

model DocumentCostCenterLink {
  id           String   @id @default(dbgenerated("'dcc_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentId   String
  costCenterId String
  percentage   Decimal  @db.Decimal(5, 4)
  amount       Decimal  @db.Decimal(15, 2)
  createdAt    DateTime @default(now())

  // Relations
  document   Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  costCenter CostCenter @relation(fields: [costCenterId], references: [id])

  @@map("document_cost_center_links")
}

model DocumentLineCostCenterLink {
  id             String   @id @default(dbgenerated("'dlcc_' || substr(gen_random_uuid()::text, 1, 13)"))
  documentLineId String
  costCenterId   String
  percentage     Decimal  @db.Decimal(5, 4)
  amount         Decimal  @db.Decimal(15, 2)
  createdAt      DateTime @default(now())

  // Relations
  documentLine DocumentLine @relation(fields: [documentLineId], references: [id], onDelete: Cascade)
  costCenter   CostCenter   @relation(fields: [costCenterId], references: [id])

  @@map("document_line_cost_center_links")
}

// ============================================================================
// BANKING MODELS
// ============================================================================

model BankAccount {
  id              String          @id @default(dbgenerated("'bkacc_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId       String
  bankId          String
  accountNumber   String
  accountType     BankAccountType
  currency        String
  alias           String?
  description     String?
  isActive        Boolean         @default(true)
  initialBalance  Decimal         @default(0) @db.Decimal(15, 2)
  currentBalance  Decimal         @default(0) @db.Decimal(15, 2)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  company                 Company                   @relation(fields: [companyId], references: [id])
  bank                    Bank                      @relation(fields: [bankId], references: [id])
  currencyRef             Currency                  @relation(fields: [currency], references: [code])
  transactions            Transaction[]
  conciliations           Conciliation[]
  expenses                Expense[]

  @@unique([companyId, bankId, accountNumber])
  @@map("bank_accounts")
}

model Transaction {
  id                  String            @id @default(dbgenerated("'tran_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId           String
  bankAccountId       String
  transactionDate     DateTime
  valueDate           DateTime?
  description         String
  transactionType     TransactionType
  amount              Decimal           @db.Decimal(15, 2)
  balance             Decimal           @db.Decimal(15, 2)
  branch              String?
  operationNumber     String?
  operationTime       String?
  operatorUser        String?
  utc                 String?
  reference           String?
  channel             String?
  fileName            String?
  importedAt          DateTime?
  status              TransactionStatus @default(PENDING)
  conciliatedAmount   Decimal?          @db.Decimal(15, 2)
  pendingAmount       Decimal?          @db.Decimal(15, 2)
  transactionHash     String            @unique
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  company                 Company                   @relation(fields: [companyId], references: [id])
  bankAccount             BankAccount               @relation(fields: [bankAccountId], references: [id])
  conciliations           Conciliation[]

  @@map("transactions")
}

// ============================================================================
// UNIFIED CONCILIATION MODEL
// ============================================================================

model Conciliation {
  id                      String              @id @default(dbgenerated("'conc_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId               String
  bankAccountId           String
  transactionId           String?
  type                    ConciliationType    @default(DOCUMENTS)
  reference               String?
  periodStart             DateTime
  periodEnd               DateTime
  totalDocuments          Int                 @default(0)
  conciliatedItems        Int                 @default(0)
  pendingItems            Int                 @default(0)
  bankBalance             Decimal             @db.Decimal(15, 2)
  bookBalance             Decimal             @db.Decimal(15, 2)
  difference              Decimal             @db.Decimal(15, 2)
  toleranceAmount         Decimal             @default(0) @db.Decimal(15, 2)
  status                  ConciliationStatus  @default(PENDING)
  additionalExpensesTotal Decimal             @default(0) @db.Decimal(15, 2)
  totalAmount             Decimal?            @db.Decimal(15, 2)
  paymentDate             DateTime?
  paymentAmount           Decimal?            @db.Decimal(15, 2)
  notes                   String?
  createdById             String
  approvedById            String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  completedAt             DateTime?

  // Relations
  company         Company             @relation(fields: [companyId], references: [id])
  bankAccount     BankAccount         @relation(fields: [bankAccountId], references: [id])
  transaction     Transaction?        @relation(fields: [transactionId], references: [id])
  createdBy       User                @relation("ConciliationCreatedBy", fields: [createdById], references: [id])
  approvedBy      User?               @relation("ConciliationApprovedBy", fields: [approvedById], references: [id])
  items           ConciliationItem[]
  expenses        ConciliationExpense[]
  documentDetractions DocumentDetraction[]

  @@map("conciliations")
}

model ConciliationItem {
  id                     String                    @id @default(dbgenerated("'citem_' || substr(gen_random_uuid()::text, 1, 13)"))
  conciliationId         String
  itemType               ConciliationItemType
  documentId             String?
  documentAmount         Decimal                   @db.Decimal(15, 2)
  conciliatedAmount      Decimal                   @db.Decimal(15, 2)
  difference             Decimal                   @db.Decimal(15, 2)
  distributionPercentage Decimal                   @default(100) @db.Decimal(5, 4)
  detractionAmount       Decimal                   @default(0) @db.Decimal(15, 2)
  retentionAmount        Decimal                   @default(0) @db.Decimal(15, 2)
  status                 ConciliationItemStatus    @default(PENDING)
  notes                  String?
  systemNotes            String?
  conciliatedBy          String?
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt

  // Relations
  conciliation Conciliation @relation(fields: [conciliationId], references: [id], onDelete: Cascade)
  document     Document?    @relation(fields: [documentId], references: [id])

  @@map("conciliation_items")
}

model ConciliationExpense {
  id                 String      @id @default(dbgenerated("'cexp_' || substr(gen_random_uuid()::text, 1, 13)"))
  conciliationId     String
  description        String
  amount             Decimal     @db.Decimal(15, 2)
  expenseType        ExpenseType
  accountId          String?
  notes              String?
  isTaxDeductible    Boolean     @default(true)
  supportingDocument String?
  expenseDate        DateTime
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relations
  conciliation Conciliation       @relation(fields: [conciliationId], references: [id], onDelete: Cascade)
  account      AccountingAccount? @relation(fields: [accountId], references: [id])

  @@map("conciliation_expenses")
}

// ============================================================================
// EXPENSE MODEL (NORMALIZED)
// ============================================================================

model Expense {
  id                String        @id @default(dbgenerated("'exp_' || substr(gen_random_uuid()::text, 1, 13)"))
  companyId         String
  lineNumber        Int?
  bankAccountId     String?
  transactionDate   DateTime
  valueDate         DateTime?
  operationDesc     String?
  amount            Decimal       @db.Decimal(15, 2)
  balance           Decimal?      @db.Decimal(15, 2)
  branch            String?
  operationNumber   String?
  operationTime     String?
  user              String?
  utc               String?
  reference2        String?
  documentType      String?
  fiscalFolio       String?
  concept           String?
  totalAmount       Decimal?      @db.Decimal(15, 2)
  subtotal          Decimal?      @db.Decimal(15, 2)
  igv               Decimal?      @db.Decimal(15, 2)
  isr               Decimal?      @db.Decimal(15, 2)
  accountingMonth   String?
  comments          String?
  documentDate      DateTime?
  issueDate         DateTime?
  dueDate           DateTime?
  isMassive         Boolean       @default(false)
  expenseType       ExpenseType
  currency          String
  supplierId        String?
  documentId        String?
  expenseCategoryId String?
  status            ExpenseStatus @default(IMPORTED)
  originalFileName  String?
  rowHash           String?
  importedAt        DateTime?
  importedById      String?
  processedAt       DateTime?
  processedById     String?
  reconciledAt      DateTime?
  reconciledById    String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  company         Company          @relation(fields: [companyId], references: [id])
  bankAccount     BankAccount?     @relation(fields: [bankAccountId], references: [id])
  currencyRef     Currency         @relation(fields: [currency], references: [code])
  supplier        Supplier?        @relation(fields: [supplierId], references: [id])
  document        Document?        @relation(fields: [documentId], references: [id])
  expenseCategory ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])
  importedBy      User?            @relation("ExpenseImportedBy", fields: [importedById], references: [id])
  processedBy     User?            @relation("ExpenseProcessedBy", fields: [processedById], references: [id])
  reconciledBy    User?            @relation("ExpenseReconciledBy", fields: [reconciledById], references: [id])

  @@map("expenses")
}

// ============================================================================
// REFERENCE MODELS
// ============================================================================

model Bank {
  id        String   @id @default(dbgenerated("'bank_' || substr(gen_random_uuid()::text, 1, 13)"))
  name      String
  code      String   @unique
  country   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bankAccounts         BankAccount[]
  supplierBankAccounts SupplierBankAccount[]

  @@map("banks")
}

model Currency {
  code      String   @id
  name      String
  symbol    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bankAccounts         BankAccount[]
  documents            Document[]
  expenses             Expense[]
  supplierBankAccounts SupplierBankAccount[]
  sunatRhe             SunatRhe[]
  sunatInvoices        SunatInvoice[]

  @@map("currencies")
}

// ============================================================================
// SUNAT INTEGRATION MODELS
// ============================================================================

model SunatRhe {
  id                  String   @id @default(dbgenerated("'srhe_' || substr(gen_random_uuid()::text, 1, 13)"))
  issueDate           DateTime
  documentType        String   // Tipo Doc. Emitido
  documentNumber      String   // Nro. Doc. Emitido
  status              String   // Estado Doc. Emitido
  issuerDocumentType  String   // Tipo de Doc. Emisor
  issuerRuc           String   // Nro. Doc. Emisor
  issuerName          String   // Razón Social del Emisor
  rentType            String   // Tipo de Renta
  isFree              Boolean  // Gratuito (sí/no)
  description         String?  // Descripción
  observation         String?  // Observación
  currency            String   // Moneda de Operación
  grossIncome         Decimal  @db.Decimal(15, 2) // Renta Bruta
  incomeTax           Decimal  @db.Decimal(15, 2) // Impuesto a la Renta
  netIncome           Decimal  @db.Decimal(15, 2) // Renta Neta
  netPendingAmount    Decimal? @db.Decimal(15, 2) // Monto Neto Pendiente de Pago
  sourceFile          String
  companyId           String
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  currencyRef Currency @relation(fields: [currency], references: [code])
  company     Company  @relation(fields: [companyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("sunat_rhe")
}


model SunatInvoice {
  id                     String   @id @default(dbgenerated("'sinv_' || substr(gen_random_uuid()::text, 1, 13)"))
  period                 String   // Periodo
  carSunat               String   // CAR SUNAT
  ruc                    String   // RUC del emisor
  name                   String   // Razón Social
  issueDate              DateTime // Fecha de emisión
  expirationDate         DateTime? // Fecha de vencimiento/pago
  documentType           String   // Tipo CP/Doc.
  series                 String   // Serie del CDP
  year                   String?  // Año (si aplica)
  documentNumber         String   // Nro CP o Doc.
  identityDocumentType   String?  // Tipo Doc Identidad
  identityDocumentNumber String?  // Nro Doc Identidad
  customerName           String?  // Apellidos Nombres/ Razón Social del cliente
  taxableBase            Decimal  @db.Decimal(15, 2) // BI Gravado DG
  igv                    Decimal  @db.Decimal(15, 2) // IGV / IPM DG
  taxableBaseNg          Decimal? @db.Decimal(15, 2) // BI Gravado DGNG
  igvNg                  Decimal? @db.Decimal(15, 2) // IGV / IPM DGNG
  taxableBaseDng         Decimal? @db.Decimal(15, 2) // BI Gravado DNG
  igvDng                 Decimal? @db.Decimal(15, 2) // IGV / IPM DNG
  valueNgAcquisition     Decimal? @db.Decimal(15, 2) // Valor Adq. NG
  isc                    Decimal? @db.Decimal(15, 2) // ISC
  icbper                 Decimal? @db.Decimal(15, 2) // ICBPER
  otherCharges           Decimal? @db.Decimal(15, 2) // Otros Trib/Cargos
  total                  Decimal  @db.Decimal(15, 2) // Total CP
  currency               String   // Moneda
  exchangeRate           Decimal? @db.Decimal(10, 4) // Tipo de Cambio
  modifiedIssueDate      DateTime? // Fecha Emisión Doc Modificado
  modifiedDocType        String?  // Tipo CP Modificado
  modifiedDocSeries      String?  // Serie CP Modificado
  modifiedDocNumber      String?  // Nro CP Modificado
  damCode                String?  // COD. DAM o DSI
  goodsServicesClass     String?  // Clasificación Bss y Sss
  projectOperatorId      String?  // ID Proyecto Operadores
  participationPercent   Decimal? @db.Decimal(5, 2) // Porcentaje de participación
  imb                    String?  // IMB
  carOrigin              String?  // CAR Orig / Ind E o I
  detraction             String?  // Detracción
  noteType               String?  // Tipo de Nota
  invoiceStatus          String?  // Estado del comprobante
  incal                  String?  // Incal (¿anulado?)
  sourceFile             String
  companyId              String
  userId                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  currencyRef Currency @relation(fields: [currency], references: [code])
  company     Company  @relation(fields: [companyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("sunat_invoices")
}


// ============================================================================
// SYSTEM MODELS
// ============================================================================

model AuditLog {
  id          String      @id @default(dbgenerated("'audl_' || substr(gen_random_uuid()::text, 1, 13)"))
  userId      String
  action      AuditAction
  entity      String
  entityId    String?
  description String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])

  // Relations
  user User @relation(fields: [userId], references: [id])
  

  @@map("audit_logs")
}