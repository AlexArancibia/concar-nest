generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL") // uses a direct connection
}

// Enums for various statuses and types used throughout the schema
enum CurrencyPosition {
  BEFORE // Symbol appears before the amount (e.g., $100)
  AFTER  // Symbol appears after the amount (e.g., 100â‚¬)
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostType {
  BLOG
  NEWS
  PRODUCT_DESCRIPTION
  PAGE
}


enum OrderFinancialStatus {
  PENDING
  AUTHORIZED
  PARTIALLY_PAID
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  VOIDED
}

enum OrderFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
  PENDING_FULFILLMENT
  OPEN
  IN_PROGRESS
  ON_HOLD
  SCHEDULED
}

enum ProductStatus {
  DRAFT    // Product is not yet published
  ACTIVE   // Product is published and available
  ARCHIVED // Product is no longer available but kept for record
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}


enum PaymentProviderType {
  PAYPAL
  STRIPE
  MERCADOPAGO
  BANK_TRANSFER
  CASH_ON_DELIVERY
  OTHER
}

enum ShippingMethodType {
  STANDARD
  EXPRESS
  OVERNIGHT
  FREE
  PICKUP
  CUSTOM
}

enum ContentType {
  ARTICLE
  BLOG
  PAGE
  NEWS
}


enum UserRole {
  ADMIN
  MANAGER
  EDITOR
  CUSTOMER_SERVICE
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Model for storing shop-wide settings
model ShopSettings {
  id                  String           @id @default(dbgenerated("'shop_' || substr(gen_random_uuid()::text, 1, 13)"))
  name                String           // Name of the shop
  domain              String           @unique // Domain of the shop's website
  email               String?          // Contact email for the shop
  shopOwner           String?          // Name of the shop owner
  logo                String?          // URL of the shop's logo
  description         String?          // Short description of the shop
  address1            String?          // First line of the shop's address
  address2            String?          // Second line of the shop's address
  city                String?          // City where the shop is located
  province            String?          // Province or state where the shop is located
  provinceCode        String?          // Code of the province or state
  country             String?          // Country where the shop is located
  countryCode         String?          // Code of the country
  zip                 String?          // Zip or postal code of the shop
  phone               String?          // Contact phone number for the shop
  
  // Currency Settings
  defaultCurrency     Currency         @relation("DefaultCurrency", fields: [defaultCurrencyId], references: [id])
  defaultCurrencyId   String           @unique // Default currency used by the shop
  acceptedCurrencies  Currency[]       @relation("AcceptedCurrencies") // Currencies accepted by the shop
  multiCurrencyEnabled Boolean         @default(false) // Whether multiple currencies are supported

  // Shipping Settings
  shippingZones       String?          // Regions where the shop ships
  defaultShippingRate Decimal?         // Default shipping rate
  freeShippingThreshold Decimal?       // Minimum order amount for free shipping

  // Tax Settings
  taxesIncluded       Boolean          @default(false) // Whether prices include taxes
  taxValue            Decimal?          // Default tax value

  // Timezone & Measurement Settings
  timezone            String?          // Timezone of the shop
  weightUnit          String?          // Unit used for weight measurements

  // Branding & Theme
  primaryColor        String?          // Primary color code for branding
  secondaryColor      String?          // Secondary color code for branding
  theme               String?          // Shop's selected theme

  // Social Media
  facebookUrl         String?          // Facebook page URL
  instagramUrl        String?          // Instagram profile URL
  twitterUrl          String?          // Twitter profile URL
  tiktokUrl           String?          // TikTok profile URL
  youtubeUrl          String?          // YouTube channel URL

  // Analytics & Tracking
  googleAnalyticsId   String?          // Google Analytics tracking ID
  facebookPixelId     String?          // Facebook Pixel tracking ID

  // Support & Customer Service
  supportEmail        String?          // Support email address
  supportPhone        String?          // Support phone number
  liveChatEnabled     Boolean          @default(false) // Whether live chat is enabled

  // Status & Advanced Settings
  status              String           @default("active") // Shop status: active, inactive, suspended
  maintenanceMode     Boolean          @default(false) // Whether the shop is in maintenance mode
  multiLanguageEnabled Boolean         @default(false) // Whether multiple languages are supported

  // Timestamps
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relations
  Currency            Currency[]       @relation("BaseCurrency") // Currencies for which this shop is the base
}

// Model for currencies supported by the shop
model Currency {
  id                 String         @id @default(dbgenerated("'curr_' || substr(gen_random_uuid()::text, 1, 13)"))
  code               String         @unique // ISO code of the currency (e.g., USD, EUR)
  name               String         // Full name of the currency
  symbol             String         // Symbol of the currency
  decimalPlaces      Int            @default(2) // Number of decimal places for the currency
  symbolPosition     CurrencyPosition @default(BEFORE) // Position of the currency symbol
  isActive           Boolean        @default(true) // Whether the currency is active
  defaultForShop     ShopSettings?  @relation("DefaultCurrency")
  acceptedByShops    ShopSettings[] @relation("AcceptedCurrencies")
  baseForShops       ShopSettings[] @relation("BaseCurrency")
  fromExchangeRates  ExchangeRate[] @relation("FromCurrency")
  toExchangeRates    ExchangeRate[] @relation("ToCurrency")
  orders             Order[]
  paymentProviders   PaymentProvider[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt


  VariantPrice VariantPrice[]
  paymentTransactions PaymentTransaction[]

  ShippingMethodPrice ShippingMethodPrice[]
}

// Model for storing exchange rates between currencies
model ExchangeRate {
  id               String   @id @default(dbgenerated("'exr_' || substr(gen_random_uuid()::text, 1, 13)"))
  fromCurrency     Currency @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  fromCurrencyId   String   // Currency being converted from
  toCurrency       Currency @relation("ToCurrency", fields: [toCurrencyId], references: [id])
  toCurrencyId     String   // Currency being converted to
  rate             Decimal  // Exchange rate
  effectiveDate    DateTime // Date from which this rate is effective
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([fromCurrencyId, toCurrencyId, effectiveDate])
}

// Model for product categories
model Category {
  id           String     @id @default(dbgenerated("'cat_' || substr(gen_random_uuid()::text, 1, 13)"))
  name         String     // Name of the category
  slug         String     @unique // URL-friendly version of the name
  description  String?    // Description of the category
  imageUrl     String?
  parentId     String?    // ID of the parent category (for nested categories)
  parent       Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToParent")
  products     Product[]  // Products belonging to this category
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  metaTitle    String?    // Meta title for SEO
  metaDescription String? // Meta description for SEO

  Coupon Coupon[]
}

// Model for products
model Product {
  id                String          @id @default(dbgenerated("'prod_' || substr(gen_random_uuid()::text, 1, 13)"))
  title             String          // Title of the product
  description       String?         // Description of the product
  slug              String          @unique // URL-friendly version of the title
  vendor            String?         // Vendor or brand of the product
  fbt               Json?           // frecuently bought together
  allowBackorder    Boolean       @default(false) 
  releaseDate       DateTime?
  status            ProductStatus   @default(DRAFT) // Current status of the product
  categories        Category[]      // Categories the product belongs to
  variants          ProductVariant[] // Variants of the product
  imageUrls         String[]        // URLs of the product images
  collections       Collection[]    // Collections the product belongs to
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  metaTitle         String?         // Meta title for SEO
  metaDescription   String?         // Meta description for SEO

  coupon Coupon[]

  @@index([status, vendor])
}

 
// Model for product variants
model ProductVariant {
  id                String        @id @default(dbgenerated("'var_' || substr(gen_random_uuid()::text, 1, 13)"))
  product           Product       @relation(fields: [productId], references: [id])
  productId         String        // ID of the parent product
  title             String        // Title of the variant
  sku               String?       // Stock Keeping Unit for the variant
  isActive          Boolean       @default(true)
  attributes        Json?         // JSON object containing variant attributes
  imageUrl          String?       // URL of the variant's image
  prices            VariantPrice[] // Prices of the variant in different currencies
  inventoryQuantity Int           @default(0) // Available quantity of this variant
  weightValue       Decimal?      // Weight of the variant
  position          Int           @default(1) // Position of the variant in the list
  orderItems        OrderItem[]   // Order items referencing this variant
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// Model for variant prices in different currencies
model VariantPrice {
  id         String         @id @default(dbgenerated("'vp_' || substr(gen_random_uuid()::text, 1, 13)"))
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  String         // ID of the variant this price is for
  currency   Currency       @relation(fields: [currencyId], references: [id])
  currencyId String         // ID of the currency for this price
  price      Decimal        // Price value
  originalPrice Decimal?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([variantId, currencyId])
}

// Model for customers
model Customer {
  id               String            @id @default(dbgenerated("'cu_' || substr(gen_random_uuid()::text, 1, 13)"))
  email            String?            @unique // Email address of the customer
  firstName        String?           // First name of the customer
  lastName         String?           // Last name of the customer
  phone            String?           // CAMBIAR A INT
  password         String?            // Hashed password of the customer
  acceptsMarketing Boolean           @default(false) // Whether the customer accepts marketing emails
  orders           Order[]           // Orders placed by this customer
  addresses        Address[] // Addresses associated with this customer
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  extrainfo        Json?               
}

// Model for orders
model Order {
  id                String                 @id @default(dbgenerated("'ord_' || substr(gen_random_uuid()::text, 1, 13)"))
  customer          Customer?              @relation(fields: [customerId], references: [id])
  customerId        String?                // ID of the customer who placed the order
  orderNumber       Int                    // Unique number for the order
  financialStatus   OrderFinancialStatus?  // Current financial status of the order
  fulfillmentStatus OrderFulfillmentStatus? // Current fulfillment status of the order
  currency          Currency                @relation(fields: [currencyId], references: [id])
  currencyId        String                 // This will store the currency code
  totalPrice        Decimal                // Total price of the order
  subtotalPrice     Decimal                // Subtotal price (before tax and discounts)
  totalTax          Decimal                // Total tax amount
  totalDiscounts    Decimal                // Total discounts applied
  lineItems         OrderItem[]            // Items in the order
  shippingAddressId String?                // ID of the shipping address
  shippingAddress   Address?               @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?                // ID of the billing address
  billingAddress    Address?               @relation("BillingAddress", fields: [billingAddressId], references: [id])
  refunds           Refund[]               // Refunds associated with this order
  coupon            Coupon?                @relation(fields: [couponId], references: [id])
  couponId          String?                // ID of the coupon applied to this order
  paymentProvider   PaymentProvider?       @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String?                // ID of the payment provider used
  paymentStatus     PaymentStatus?          @default(PENDING)
  paymentDetails    Json?                 // Additional payment details (e.g., transaction ID, payment method details)
  shippingMethod    ShippingMethod?        @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  String?                // ID of the shipping method used
  shippingStatus    ShippingStatus         @default(PENDING) // Current shipping status
  trackingNumber    String?                // Tracking number for the shipment
  trackingUrl       String?                // URL to track the shipment
  estimatedDeliveryDate DateTime?          // Estimated delivery date
  shippedAt         DateTime?              // Date when the order was shipped
  deliveredAt       DateTime?              // Date when the order was delivered
  customerNotes     String?                // Notes from the customer about the order
  internalNotes     String?                // Internal notes for staff (not visible to customer)
  source            String?                // Source of the order (e.g., "website", "mobile app", "phone")
  preferredDeliveryDate DateTime?          // Customer's preferred delivery date
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  customerMetadata  Json?                 
  paymentTransaction PaymentTransaction[]

  @@index([orderNumber, customerId, financialStatus, fulfillmentStatus])
}

// Model for order items
model OrderItem {
  id                 String    @id @default(dbgenerated("'oi_' || substr(gen_random_uuid()::text, 1, 13)"))
  order              Order     @relation(fields: [orderId], references: [id])
  orderId            String    // ID of the order this item belongs to
  variant            ProductVariant? @relation(fields: [variantId], references: [id])
  variantId          String?   // ID of the product variant (if applicable)
  title              String    // Title of the product
  quantity           Int       // Quantity ordered
  price              Decimal   // Price per unit at the time of order
  totalDiscount      Decimal   @default(0) // Total discount applied to this item
  refundLineItems    RefundLineItem[] // Refund line items for this order item
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// Model for addresses (used for shipping and billing)
model Address {
  id                String   @id @default(dbgenerated("'addr_' || substr(gen_random_uuid()::text, 1, 13)"))
  isDefault         Boolean?  @default(false)
  company           String?  // Company name (if applicable)
  address1          String   // First line of the address
  address2          String?  // Second line of the address
  city              String   // City
  province          String?  // Province or state
  zip               String   // Zip or postal code
  country           String   // Country
  phone             String?  // Phone number associated with this address
  ordersAsShipping  Order[]  @relation("ShippingAddress") // Orders using this as shipping address
  ordersAsBilling   Order[]  @relation("BillingAddress") // Orders using this as billing address
  customer          Customer @relation(fields: [customerId], references: [id]) // RelaciÃ³n con Customer
  customerId        String   // Campo para la clave forÃ¡nea
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

}

// Model for refunds
model Refund {
  id            String          @id @default(dbgenerated("'ref_' || substr(gen_random_uuid()::text, 1, 13)"))
  order         Order           @relation(fields: [orderId], references: [id])
  orderId       String          // ID of the order this refund belongs to
  amount        Decimal         // Total amount refunded
  note          String?         // Note about the refund
  restock       Boolean         @default(false) // Whether items were restocked
  processedAt   DateTime?       // When the refund was processed
  lineItems     RefundLineItem[] // Line items included in this refund
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Model for refund line items
model RefundLineItem {
  id            String    @id @default(dbgenerated("'rli_' || substr(gen_random_uuid()::text, 1, 13)"))
  refund        Refund    @relation(fields: [refundId], references: [id])
  refundId      String    // ID of the refund this line item belongs to
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId   String    // ID of the order item being refunded
  quantity      Int       // Quantity being refunded
  amount        Decimal   // Amount refunded for this line item
  restocked     Boolean   @default(false) // Whether this item was restocked
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Model for product collections
model Collection {
  id          String    @id @default(dbgenerated("'col_' || substr(gen_random_uuid()::text, 1, 13)"))
  title       String    // Title of the collection
  description String?   // Description of the collection
  slug        String    @unique // URL-friendly version of the title
  products    Product[] // Products in this collection
  imageUrl    String?   // URL of the collection's image
  createdAt   DateTime  @default(now())
  isFeatured  Boolean   @default(false)
  updatedAt   DateTime  @updatedAt
  metaTitle   String?   // Meta title for SEO
  metaDescription String? // Meta description for SEO

  Coupon Coupon[]
}

model ShippingMethod {
  id          String             @id @default(dbgenerated("'sm_' || substr(gen_random_uuid()::text, 1, 13)"))
  name        String             // Name of the shipping method
  description String?            // Description of the shipping method
  prices                ShippingMethodPrice[] // Prices for different currencies
  estimatedDeliveryTime String?  // Estimated delivery time (e.g., "3-5 business days")
  isActive    Boolean            @default(true) // Whether the method is active
  orders      Order[]            // Orders using this shipping method
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}


model ShippingMethodPrice {
  id               String        @id @default(dbgenerated("'smp_' || substr(gen_random_uuid()::text, 1, 13)"))
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String
  currency         Currency       @relation(fields: [currencyId], references: [id])
  currencyId       String
  price            Decimal
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([shippingMethodId, currencyId])
}

 

// Model for payment providers
model PaymentProvider {
  id          String              @id @default(dbgenerated("'pp_' || substr(gen_random_uuid()::text, 1, 13)"))
  name        String              // Name of the payment provider
  type        PaymentProviderType // Type of payment provider
  description String?             // Description of the payment provider
  isActive    Boolean             @default(true) // Whether the provider is active
  credentials Json?               // Credentials for connecting to the provider (encrypted)
  orders      Order[]             // Orders processed by this provider
  currency    Currency            @relation(fields: [currencyId], references: [id]) // Relation to Currency model
  currencyId  String              // Foreign key for Currency
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  PaymentTransaction PaymentTransaction[]
}

model Coupon {
  id                  String       @id @default(dbgenerated("'coup_' || substr(gen_random_uuid()::text, 1, 13)"))
  code                String       @unique
  description         String?
  type                DiscountType
  value               Decimal
  minPurchase         Decimal?
  maxUses             Int?
  usedCount           Int          @default(0)
  startDate           DateTime
  endDate             DateTime
  isActive            Boolean      @default(true)
  applicableProducts  Product[]    // Products to which the coupon can be applied
  applicableCategories Category[]  // Categories to which the coupon can be applied
  applicableCollections Collection[] // Collections to which the coupon can be applied
  orders              Order[]      // Orders that used this coupon
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

// Model for users (admin, managers, editors, etc.)
model User {
  id           String      @id @default(dbgenerated("'user_' || substr(gen_random_uuid()::text, 1, 13)"))
  email        String      @unique // Email address of the user
  password     String      // Hashed password
  image        String?
  firstName    String      // First name of the user
  lastName     String      // Last name of the user
  role         UserRole    // Role of the user in the system
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  posts     Content[]
}

model PaymentTransaction {
  id                String   @id @default(dbgenerated("'pt_' || substr(gen_random_uuid()::text, 1, 13)"))
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           String
  paymentProvider   PaymentProvider @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String
  amount            Decimal
  currency          Currency @relation(fields: [currencyId], references: [id])
  currencyId        String
  status            PaymentStatus   // e.g., "pending", "completed", "failed"
  transactionId     String?  // ID provided by the payment gateway
  paymentMethod     String?  // e.g., "credit_card", "bank_transfer"
  errorMessage      String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

  model Content {
  id          String    @id @default(dbgenerated("'cnt_' || substr(gen_random_uuid()::text, 1, 13)"))
  title       String
  slug        String    @unique
  body        String?
  type        ContentType
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id])
  category    String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  featuredImage String?
  metadata    Json?     // SEO metadata, tags, categories, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
 
model HeroSection {
  id                String   @id @default(dbgenerated("'hero_' || substr(gen_random_uuid()::text, 1, 13)"))
  title             String
  subtitle          String?
  backgroundImage   String?
  mobileBackgroundImage String?
  buttonText        String?
  buttonLink        String?
  styles            Json?     // Stores alignment, colors, opacity, etc.
  metadata          Json?     // SEO metadata, tags, categories, etc.
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}